{"version":3,"sources":["test.bridge.js"],"names":["assert","require","wichevr","equal","deepEqual","test","hello","ClassA","testA","test2","arguments","test4","procedure","Error","test3","Infinity","undefined","NaN","toString","console","log"],"mappings":"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","file":"test.bridge.js","sourcesContent":["const assert = require( \"assert\" );\r\nconst wichevr = require( \"./wichevr.js\" );\r\n\r\nassert.equal( wichevr( \"\", false, true ), true, \"should return true\" );\r\n\r\nassert.equal( wichevr( 1, \"hello\", true ), 1, \"should return 1\" );\r\n\r\nassert.deepEqual( wichevr( false, [ ], [ 1, 2, 3 ] ), [ 1, 2, 3 ], \"should be deeply equal\" );\r\n\r\nlet test = function hello( ){ };\r\nassert.deepEqual( wichevr( false, Symbol.for( \"id\" ), test ), test, \"should return value of test variable\" );\r\n\r\nassert.equal( wichevr( null, Symbol.for( \"hello\" ) ), Symbol.for( \"hello\" ),\r\n\t\t\t\t\"should be deeply equal\" );\r\n\r\nassert.deepEqual( wichevr( { }, Symbol.for( \"cloaked\" ), true ), { }, \"should return empty object\" );\r\n\r\nclass ClassA{\r\n\tconstructor( ){ }\r\n\tmethod( ){ return \"hello\"; }\r\n}\r\n\r\nlet testA = new ClassA( );\r\nassert.deepEqual( wichevr( { }, testA ), { }, \"should be deeply equal\" );\r\nassert.deepEqual( wichevr( testA, { } ), testA, \"should be deeply equal\" );\r\n\r\nlet test2 = function hello( ){ };\r\nassert.deepEqual( wichevr( test2, \"hello\", true ), test2, \"should return value of test variable\" );\r\n\r\nassert.equal( wichevr( \"\", false, \"hello\" ), \"hello\", \"should return 'hello'\" );\r\n\r\nassert.deepEqual( wichevr( \"\", false, arguments ), arguments, \"should return arguments\" );\r\n\r\nlet test4 = function hello( ){ return \"hello\" };\r\nassert.deepEqual( wichevr( test4,\r\n\t\t\t\t\tfunction procedure( ){ throw new Error( \"no operation\" ) } ),\r\n\t\t\t\t\ttest4, \"should be deeply equal\" );\r\n\r\nlet test3 = function hello( ){ return \"hello\" };\r\nassert.deepEqual( wichevr( test3, true, false ), test3, \"should be deeply equal\" );\r\n\r\nassert.equal( wichevr( false, function hello( ){ return \"hello\" }, true ), true, \"should return true\" );\r\n\r\nassert.equal( wichevr( \"\", \"yeah\", { } ), \"yeah\", \"should have value 'yeah'\" );\r\n\r\nassert.deepEqual( wichevr( [ ], true ), [ ], \"should be deeply equal\" );\r\n\r\nassert.equal( wichevr( true, [ ] ), true, \"should return true\" );\r\n\r\nassert.equal( wichevr( Infinity, \"\", null ), Infinity, \"should be equal\" );\r\n\r\nassert.deepEqual( wichevr( null, { } ), { }, \"should be deeeply equal\" );\r\n\r\nassert.equal( wichevr( null, undefined, NaN.toString( ) ), NaN.toString( ), \"should be equal\" );\r\n\r\nassert.equal( wichevr( 0, 1 ), 1, \"should have value 1\" );\r\n\r\nassert.equal( wichevr( 0, \"\" ), \"\", \"should have empty string\" );\r\n\r\nassert.deepEqual( wichevr( 0, { } ), { }, \"should have empty object\" );\r\n\r\nassert.equal( wichevr( 0, { }, true ), true, \"should have boolean true\" );\r\n\r\nassert.equal( wichevr( \"yeah\", 0, { } ), \"yeah\", \"should have value 'yeah'\" );\r\n\r\nassert.deepEqual( wichevr( { }, 0, \"yeah\" ), { }, \"should be equal\" );\r\n\r\nconsole.log( \"ok\" );\r\n"]}